# Pre-Commit-Konfiguration f√ºr KEI-Agent Python SDK
# F√ºhrt automatische Code-Quality-Checks vor jedem Git-Commit aus
#
# Installation: pip install pre-commit && pre-commit install
# Manueller Lauf: pre-commit run --all-files

# Alle Hooks ausf√ºhren, auch wenn einer fehlschl√§gt
fail_fast: false

# Standard-Ausschl√ºsse
default_stages: [ commit ]
exclude: |
  (?x)^(
    \.git/.*|
    \.pytest_cache/.*|
    __pycache__/.*|
    \.mypy_cache/.*|
    \.ruff_cache/.*|
    site/.*|
    htmlcov/.*|
    \.coverage.*|
    build/.*|
    dist/.*|
    \.venv/.*|
    venv/.*
  )$

repos:
  # ============================================================================
  # ALLGEMEINE CODE-QUALIT√ÑT
  # ============================================================================

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      # Basis-Formatierung
      - id: trailing-whitespace
        name: üßπ Entferne trailing whitespace
        description: Entfernt √ºberfl√ºssige Leerzeichen am Zeilenende

      - id: end-of-file-fixer
        name: üìù Korrigiere End-of-File
        description: Stellt sicher, dass Dateien mit einer Newline enden

      - id: check-merge-conflict
        name: üîÄ Pr√ºfe Merge-Konflikte
        description: Verhindert Commits mit Merge-Konflikt-Markern

      - id: check-case-conflict
        name: üìÅ Pr√ºfe Dateinamen-Konflikte
        description: Verhindert case-sensitive Dateinamen-Konflikte

      # Dateigr√∂√üe und -typ Kontrollen
      - id: check-added-large-files
        name: üì¶ Pr√ºfe gro√üe Dateien
        description: Verhindert das Hinzuf√ºgen von Dateien > 500KB
        args: [ '--maxkb=500' ]

      - id: check-executables-have-shebangs
        name: üîß Pr√ºfe Shebang in ausf√ºhrbaren Dateien
        description: Stellt sicher, dass ausf√ºhrbare Dateien Shebangs haben

      # Syntax-Validierung
      - id: check-yaml
        name: üìã Validiere YAML-Syntax
        description: Pr√ºft YAML-Dateien auf Syntax-Fehler
        exclude: ^\.github/workflows/.*\.yml$  # Separate Validierung f√ºr Workflows

      - id: check-json
        name: üîç Validiere JSON-Syntax
        description: Pr√ºft JSON-Dateien auf Syntax-Fehler

      - id: check-toml
        name: ‚öôÔ∏è Validiere TOML-Syntax
        description: Pr√ºft TOML-Dateien (pyproject.toml) auf Syntax-Fehler

      - id: check-xml
        name: üìÑ Validiere XML-Syntax
        description: Pr√ºft XML-Dateien auf Syntax-Fehler

  # ============================================================================
  # PYTHON CODE-QUALIT√ÑT
  # ============================================================================

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.9
    hooks:
      # Ruff Linting (ersetzt flake8, pylint)
      - id: ruff
        name: üîç Ruff Linting
        description: F√ºhrt Linting mit Ruff aus (ersetzt flake8)
        args:
          - --fix
          - --exit-non-zero-on-fix
        files: '^[^/]*\.py$'  # Nur Python-Dateien im Root (flache Struktur)
        # KEINE Tests ausschlie√üen - alle Python-Dateien pr√ºfen!

      # Ruff Formatierung (ersetzt black, isort)
      - id: ruff-format
        name: üé® Ruff Formatierung
        description: Formatiert Python-Code mit Ruff (ersetzt black + isort)
        files: '^[^/]*\.py$'  # Nur Python-Dateien im Root
        # KEINE Tests ausschlie√üen - alle Python-Dateien formatieren!

  # MyPy Typenpr√ºfung
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.11.2
    hooks:
      - id: mypy
        name: üî¨ MyPy Typenpr√ºfung
        description: Statische Typenpr√ºfung mit MyPy
        files: '^[^/]*\.py$'  # Nur Python-Dateien im Root
        exclude: ^tests/.*\.py$  # Tests ausschlie√üen (haben komplexe Mock-Typen)
        args:
          - --ignore-missing-imports
          - --no-strict-optional
          - --python-version=3.9
        additional_dependencies:
          - types-requests
          - types-PyYAML

  # Bandit Sicherheits-Scan
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.10
    hooks:
      - id: bandit
        name: üõ°Ô∏è Bandit Sicherheits-Scan
        description: Scannt Python-Code auf Sicherheitsprobleme
        files: '^[^/]*\.py$'  # Nur Python-Dateien im Root
        exclude: ^tests/.*\.py$  # Tests ausschlie√üen (verwenden assert und Mock)
        args:
          - --skip=B101,B601  # Skip assert und shell=True (in Tests √ºblich)
          - --format=custom
          - '--msg-template={abspath}:{line}: {test_id}[bandit]: {severity}: {msg}'

  # ============================================================================
  # DOKUMENTATION
  # ============================================================================
  
  # Markdown-Linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.42.0
    hooks:
      - id: markdownlint
        name: üìñ Markdown Linting
        description: Pr√ºft Markdown-Dateien auf Stil und Syntax
        args:
          - --fix
          - --disable=MD013  # Zeilenl√§nge (oft zu strikt f√ºr Code-Bl√∂cke)
          - --disable=MD033  # HTML-Tags (in MkDocs √ºblich)
          - --disable=MD041  # Erste Zeile muss H1 sein (nicht immer gew√ºnscht)
        files: \.md$
        exclude: ^site/.*\.md$  # Generierte Dokumentation ausschlie√üen

  # MkDocs Konfiguration validieren
  - repo: local
    hooks:
      - id: mkdocs-validate
        name: üìö MkDocs Konfiguration validieren
        description: Validiert MkDocs-Konfiguration und Dokumentationsstruktur
        entry: python3 -c "import mkdocs.config; mkdocs.config.load_config(); print('‚úÖ MkDocs-Konfiguration ist g√ºltig')"
        language: system
        files: ^(mkdocs\.yml|docs/.*)$
        pass_filenames: false

  # ============================================================================
  # GITHUB ACTIONS / WORKFLOWS
  # ============================================================================
  
  # GitHub Actions YAML-Validierung
  - repo: https://github.com/rhysd/actionlint
    rev: v1.7.3
    hooks:
      - id: actionlint
        name: ‚ö° GitHub Actions Linting
        description: Validiert GitHub Actions Workflow-Dateien
        files: ^\.github/workflows/.*\.ya?ml$
        args:
          - -color
          - -verbose

  # YAML-Syntax f√ºr Workflows (zus√§tzliche Validierung)
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: üìã YAML Linting (Workflows)
        description: Detaillierte YAML-Syntax-Pr√ºfung f√ºr GitHub Actions
        files: ^\.github/workflows/.*\.ya?ml$
        args:
          - --format=parsable
          - '--config-data={extends: default, rules: {line-length: {max: 120}, indentation: {spaces: 2}}}'

  # ============================================================================
  # LOKALE CUSTOM HOOKS
  # ============================================================================

  - repo: local
    hooks:
      # Vollst√§ndige Ruff-Pr√ºfung aller Python-Dateien
      - id: ruff-check-all
        name: üîç Ruff Check (ALLE Dateien)
        description: F√ºhrt Ruff-Check auf ALLEN Python-Dateien aus (inkl. Tests)
        entry: ruff check
        language: system
        files: '\.py$'
        pass_filenames: false

      # Validiere Python-Imports (flache Struktur)
      - id: validate-imports
        name: üîó Validiere Python-Imports
        description: Stellt sicher, dass keine Package-Imports verwendet werden
        entry: grep -n "from kei_agent\."
        language: system
        files: '^[^/]*\.py$'
        exclude: ^tests/.*\.py$
        types: [ python ]

      - id: check-todos
        name: üìù Pr√ºfe TODO/FIXME-Kommentare
        description: Warnt vor TODO/FIXME-Kommentaren in produktivem Code
        entry: grep -n -i -E "(TODO|FIXME|XXX|HACK)"
        language: system
        files: '^[^/]*\.py$'
        exclude: ^tests/.*\.py$
        types: [ python ]

      # Validiere pyproject.toml Konsistenz
      - id: validate-pyproject
        name: ‚öôÔ∏è Validiere pyproject.toml
        description: Pr√ºft pyproject.toml auf Konsistenz
        entry: python3 -c "import tomllib; f=open('pyproject.toml','rb'); config=tomllib.load(f); f.close(); print('‚úÖ pyproject.toml ist g√ºltig')"
        language: system
        files: ^pyproject\.toml$
        pass_filenames: false
