# Security scanning and vulnerability management workflow
name: 🛡️ Security Scan

on:
  # Run on every push and PR
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

  # Daily security scan
  schedule:
    - cron: '0 6 * * *'  # 6 AM UTC daily

  # Manual trigger
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies-only
          - code-only

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: 🔍 Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install safety pip-audit cyclonedx-bom pipdeptree tomli

    - name: 🛡️ Run Safety Scan
      continue-on-error: true
      run: |
        safety scan --output json > safety-report.json || true
        safety scan --short-report || true

    - name: 🔍 Run pip-audit Scan
      continue-on-error: true
      run: |
        pip-audit --format=json --output=pip-audit-report.json --desc || true
        pip-audit --format=table

    - name: 📊 Generate Vulnerability Summary
      run: |
        python -c "
        import json
        import os

        # Load Safety results
        safety_vulns = 0
        if os.path.exists('safety-report.json'):
            try:
                with open('safety-report.json', 'r') as f:
                    safety_data = json.load(f)
                    safety_vulns = len(safety_data)
            except:
                pass

        # Load pip-audit results
        audit_vulns = 0
        if os.path.exists('pip-audit-report.json'):
            try:
                with open('pip-audit-report.json', 'r') as f:
                    audit_data = json.load(f)
                    audit_vulns = len(audit_data.get('vulnerabilities', []))
            except:
                pass

        total_vulns = safety_vulns + audit_vulns
        print(f'Total vulnerabilities found: {total_vulns}')
        print(f'Safety vulnerabilities: {safety_vulns}')
        print(f'pip-audit vulnerabilities: {audit_vulns}')

        # Set output for next steps
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f'total_vulnerabilities={total_vulns}\n')
            f.write(f'safety_vulnerabilities={safety_vulns}\n')
            f.write(f'audit_vulnerabilities={audit_vulns}\n')
        "
      id: vuln_summary

    - name: 📦 Upload Dependency Scan Results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-scan-${{ matrix.python-version }}
        path: |
          safety-report.json
          pip-audit-report.json
        retention-days: 30

    - name: ❌ Fail on Critical Vulnerabilities
      if: steps.vuln_summary.outputs.total_vulnerabilities != '0'
      run: |
        echo "::error::Found ${{ steps.vuln_summary.outputs.total_vulnerabilities }} vulnerabilities"
        echo "Safety: ${{ steps.vuln_summary.outputs.safety_vulnerabilities }}"
        echo "pip-audit: ${{ steps.vuln_summary.outputs.audit_vulnerabilities }}"
        exit 1

  code-security-scan:
    name: 🔍 Code Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install bandit semgrep

    - name: 🛡️ Run Bandit Security Scan
      run: |
        bandit -r kei_agent/ -f json -o bandit-report.json --severity-level medium --confidence-level medium || true
        bandit -r kei_agent/ --severity-level medium --confidence-level medium

    - name: 🔍 Run Semgrep Security Scan
      continue-on-error: true
      run: |
        semgrep --config=auto --json --output=semgrep-report.json kei_agent/ || true
        semgrep --config=auto kei_agent/ || true

    - name: 📦 Upload Code Scan Results
      uses: actions/upload-artifact@v4
      with:
        name: code-security-scan
        path: |
          bandit-report.json
          semgrep-report.json
        retention-days: 30

    # Notify on security scan failure
    - name: 📢 Notify on security scan failure
      if: failure()
      uses: ./.github/actions/notify-failure
      with:
        workflow_name: ${{ github.workflow }}
        job_name: ${{ github.job }}
        failure_reason: "Security scan failed - potential security vulnerabilities detected"
        severity: "critical"
        slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        teams_webhook_url: ${{ secrets.TEAMS_WEBHOOK_URL }}
        notify_on_push: "true"
        notify_on_schedule: "true"
        notify_on_pr: "true"

  sbom-generation:
    name: 📦 Generate SBOM
    runs-on: ubuntu-latest
    needs: [dependency-scan]
    if: always()

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install cyclonedx-bom pipdeptree tomli

    - name: 📋 Generate SBOM
      run: |
        chmod +x scripts/generate_sbom.py
        python scripts/generate_sbom.py

    - name: 📦 Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-reports
        path: sbom/
        retention-days: 90

    - name: 📋 Upload SBOM to Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-release
        path: sbom/
        retention-days: 365

  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, sbom-generation]
    if: always()

    steps:
    - name: 📥 Download All Artifacts
      uses: actions/download-artifact@v4

    - name: 📊 Generate Security Summary
      run: |
        echo "# 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Check dependency scan results
        if [ -d "dependency-scan-3.11" ]; then
          echo "### 🔍 Dependency Vulnerabilities" >> $GITHUB_STEP_SUMMARY
          if [ -f "dependency-scan-3.11/safety-report.json" ]; then
            safety_count=$(jq '. | length' dependency-scan-3.11/safety-report.json 2>/dev/null || echo "0")
            echo "- Safety Database: $safety_count vulnerabilities" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f "dependency-scan-3.11/pip-audit-report.json" ]; then
            audit_count=$(jq '.vulnerabilities | length' dependency-scan-3.11/pip-audit-report.json 2>/dev/null || echo "0")
            echo "- OSV Database: $audit_count vulnerabilities" >> $GITHUB_STEP_SUMMARY
          fi
        fi

        # Check code scan results
        if [ -d "code-security-scan" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Code Security Issues" >> $GITHUB_STEP_SUMMARY
          if [ -f "code-security-scan/bandit-report.json" ]; then
            bandit_count=$(jq '.results | length' code-security-scan/bandit-report.json 2>/dev/null || echo "0")
            echo "- Bandit Issues: $bandit_count" >> $GITHUB_STEP_SUMMARY
          fi
        fi

        # Check SBOM generation
        if [ -d "sbom-reports" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 SBOM Generation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOM successfully generated" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review vulnerability reports in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "2. Update dependencies with security patches" >> $GITHUB_STEP_SUMMARY
        echo "3. Address code security issues identified by Bandit" >> $GITHUB_STEP_SUMMARY
        echo "4. Update security documentation if needed" >> $GITHUB_STEP_SUMMARY

  notify-security-team:
    name: 📧 Notify Security Team
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan]
    if: failure() && github.event_name == 'schedule'

    steps:
    - name: 📧 Send Security Alert
      run: |
        echo "Security vulnerabilities detected in scheduled scan"
        echo "Please review the security scan results and take appropriate action"
        # In a real environment, this would send notifications to security team
        # via Slack, email, or other notification systems
