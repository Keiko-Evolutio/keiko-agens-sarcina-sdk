# GitHub Actions Workflow ‚Äì nur PyPI

name: üöÄ Release & Publish to PyPi

on:
  push:
    tags:
      - "v*.*.*"
      - "*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 0.1.0b1 or 0.1.0-beta.1)"
        required: true
        type: string

permissions:
  contents: write
  id-token: write

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PYTHONIOENCODING: utf-8

jobs:
  validate-release:
    name: üîç Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      normalized_version: ${{ steps.version.outputs.normalized_version }}
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: pyproject.toml

      - name: üì¶ Install Dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install packaging toml build ruff bandit pytest

      - name: üè∑Ô∏è Extract Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          export VERSION GITHUB_OUTPUT
          python - <<'PY'
          import os
          from packaging.version import Version
          v = os.environ.get('VERSION','').strip()
          is_pr = Version(v).is_prerelease
          norm = str(Version(v))
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"is_prerelease={'true' if is_pr else 'false'}\n")
              f.write(f"normalized_version={norm}\n")
          print(f"üîñ Normalized: {norm}")
          PY

      - name: ‚úÖ Validate Version
        run: |
          export TAG_VERSION="${{ steps.version.outputs.version }}"
          python - <<'PY'
          import os, sys
          try:
              import tomllib
              with open('pyproject.toml','rb') as f:
                  data = tomllib.load(f)
          except Exception:
              import toml
              data = toml.load('pyproject.toml')
          from packaging.version import Version
          py_ver = data['project']['version']
          tag_ver = os.environ['TAG_VERSION']
          if Version(py_ver) != Version(tag_ver):
              print(f"Mismatch: pyproject={py_ver} tag={tag_ver}", file=sys.stderr)
              sys.exit(1)
          print(f"‚úÖ Version ok: {tag_ver}")
          PY

  build-package:
    name: üèóÔ∏è Build Package
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v5

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: pyproject.toml

      - name: üì¶ Install Dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -e "." || true
          pip install build twine

      - name: üèóÔ∏è Build Package
        run: |
          python build_and_publish.py --build-only --skip-quality --skip-tests

      - name: üì§ Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages-${{ needs.validate-release.outputs.normalized_version }}
          path: dist/
          retention-days: 30

  publish-prod:
    name: üöÄ Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-package]
    environment:
      name: pypi
      url: https://pypi.org/project/kei_agent_py_sdk/
    steps:
      - name: üì• Download Build Artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist-packages-${{ needs.validate-release.outputs.normalized_version }}
          path: dist/

      - name: üöÄ Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          packages-dir: dist

      - name: ‚è≥ Wait for PyPI propagation
        env:
          VERSION: ${{ needs.validate-release.outputs.normalized_version }}
        run: |
          python - <<'PY'
          import json, os, time, urllib.request
          version = os.environ['VERSION']
          urls = [
              'https://pypi.org/pypi/kei_agent_py_sdk/json',
              'https://pypi.org/pypi/kei-agent-py-sdk/json',
          ]
          for attempt in range(30):
              for url in urls:
                  try:
                      with urllib.request.urlopen(url) as r:
                          data = json.load(r)
                      if version in data.get('releases', {}):
                          print(f'‚úÖ Found {version} on PyPI ({url})')
                          raise SystemExit(0)
                  except Exception:
                      pass
              print(f'Waiting for {version} to appear on PyPI... ({attempt+1}/30)')
              time.sleep(5)
          print('‚ùå Version not visible yet on PyPI')
          raise SystemExit(1)
          PY

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: ‚úÖ Verify Install from PyPI
        run: |
          python -m pip install --upgrade pip
          set -e
          if ! python -m pip install --no-cache-dir \
              kei_agent_py_sdk==${{ needs.validate-release.outputs.normalized_version }}; then
            echo "Primary install failed, trying normalized name with hyphen..."
            python -m pip install --no-cache-dir \
              kei-agent-py-sdk==${{ needs.validate-release.outputs.normalized_version }}
          fi
          python - <<'PY'
          import importlib
          m = importlib.import_module('kei_agent')
          print(getattr(m, '__version__', 'import ok'))
          PY

  create-release:
    name: üìù Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-package, publish-prod]
    if: needs.publish-prod.result == 'success'
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v5

      - name: üì• Download Build Artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist-packages-${{ needs.validate-release.outputs.normalized_version }}
          path: dist/

      - name: üìù Generate Release Notes
        id: notes
        run: |
          VERSION="${{ needs.validate-release.outputs.normalized_version }}"
          echo "# KEI-Agent Python SDK v$VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "## üì¶ Installation" >> release_notes.md
          echo '\`\`\`bash' >> release_notes.md
          echo "pip install kei_agent_py_sdk==$VERSION" >> release_notes.md
          echo '\`\`\`' >> release_notes.md
          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: üè∑Ô∏è Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate-release.outputs.normalized_version }}
          name: KEI-Agent Python SDK v${{ needs.validate-release.outputs.normalized_version }}
          body_path: release_notes.md
          files: dist/*
          prerelease: ${{ needs.validate-release.outputs.is_prerelease == 'true' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
