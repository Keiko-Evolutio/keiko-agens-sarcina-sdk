# GitHub Actions Workflow für KEI-Agent Python SDK Continuous Integration
# Automatisiert Tests, Code-Qualität und Security-Checks mit Makefile-Integration

name: 🔄 Continuous Integration

on:
  # Trigger bei Push auf main/master Branch
  push:
    branches: [ main, master, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'LICENSE'
      - '.gitignore'
      - 'mkdocs.yml'

  # Trigger bei Pull Requests
  pull_request:
    branches: [ main, master, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'LICENSE'
      - '.gitignore'

  # Manueller Trigger
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        default: false
        type: boolean
      python_version:
        description: 'Python version for manual run'
        required: false
        default: '3.11'
        type: choice
        options:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'

# Berechtigungen
permissions:
  contents: read
  checks: write
  pull-requests: write

# Umgebungsvariablen
env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
  # Job 1: Code-Qualität und Linting
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest

    steps:
      # Repository auschecken
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5

      # Python Setup
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # Dependencies installieren
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          echo "📋 Installiere ALLE Dependencies (Haupt + Development)..."
          pip install -e "." || {
            echo "❌ Haupt-Dependencies Installation fehlgeschlagen"
            echo "📋 pyproject.toml Inhalt:"
            cat pyproject.toml | head -50
            exit 1
          }
          pip install -e ".[dev]" || {
            echo "❌ Dev-Dependencies Installation fehlgeschlagen"
            exit 1
          }
          echo "✅ Dependencies erfolgreich installiert"
          echo "📋 Installierte Haupt-Dependencies:"
          pip list | grep -E "(httpx|aiohttp|websockets|pydantic|tenacity)"
          echo "📋 Installierte Dev-Dependencies:"
          pip list | grep -E "(ruff|mypy|bandit|pytest)"

          # Test basic import
          python -c "import kei_agent; print(f'✅ KEI-Agent SDK importiert: {kei_agent.__version__ if hasattr(kei_agent, \"__version__\") else \"unknown\"}')" || echo "⚠️ Import-Test fehlgeschlagen"

          # Test kritische Dependencies
          python -c "import httpx; print('✅ httpx verfügbar')" || echo "❌ httpx fehlt"
          python -c "import aiohttp; print('✅ aiohttp verfügbar')" || echo "❌ aiohttp fehlt"

      # Ruff Linting
      - name: 🔍 Ruff Linting
        run: |
          echo "🔍 Führe Ruff Linting aus..."
          make lint

      # Ruff Formatting Check
      - name: 🎨 Ruff Format Check
        run: |
          echo "🎨 Prüfe Code-Formatierung..."
          make format-check

      # MyPy Type Checking
      - name: 🔬 MyPy Type Checking
        run: |
          echo "🔬 Führe Type-Checking aus..."
          timeout 60 make type-check || echo "⚠️ MyPy timeout - wird übersprungen"
        continue-on-error: true

      # Bandit Security Scan
      - name: 🛡️ Security Scan
        run: |
          echo "🛡️ Führe Security-Scan aus..."
          make security-scan
        continue-on-error: true  # Security-Warnungen sollen Build nicht stoppen

      # Upload Security Report
      - name: 📤 Upload Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.json
          retention-days: 30

  # Job 2: Matrix Testing
  test-matrix:
    name: 🧪 Test Matrix
    runs-on: ${{ matrix.os }}
    # Läuft parallel zu code-quality

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Windows und macOS nur für LTS-Versionen testen
          - os: windows-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.10'
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.10'

    steps:
      # Repository auschecken
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5

      # Python Setup
      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      # Dependencies installieren
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          echo "📋 Installiere ALLE Dependencies..."
          pip install -e "."
          pip install -e ".[dev]"
          echo "✅ Dependencies installiert"
          python -c "import httpx, aiohttp; print('✅ Kritische Dependencies verfügbar')"

      # Schnelle Tests (Unit Tests)
      - name: 🚀 Fast Tests
        run: |
          echo "🚀 Führe schnelle Unit Tests aus..."
          make test-fast

      # Upload Test Results
      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            htmlcov/
            .coverage
            coverage.xml
          retention-days: 30

  # Job 3: Umfassende Tests (nur Ubuntu + Python 3.11)
  comprehensive-tests:
    name: 🔬 Comprehensive Tests
    runs-on: ubuntu-latest
    # Läuft parallel zu anderen Jobs

    steps:
      # Repository auschecken
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5

      # Python Setup
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # Dependencies installieren
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          echo "📋 Installiere ALLE Dependencies (Haupt + Dev + Security)..."
          pip install -e "."
          pip install -e ".[dev,security]"
          echo "✅ Dependencies installiert"
          python -c "import httpx, aiohttp; print('✅ Kritische Dependencies verfügbar')"

      # Unit Tests mit Coverage
      - name: 🧪 Unit Tests
        run: |
          echo "🧪 Führe Unit Tests mit Coverage aus..."
          make test-unit

      # Integration Tests
      - name: 🔗 Integration Tests
        run: |
          echo "🔗 Führe Integration Tests aus..."
          make test-integration

      # Protocol Tests
      - name: 📡 Protocol Tests
        run: |
          echo "📡 Führe Protocol Tests aus..."
          make test-protocol

      # Refactored Component Tests
      - name: 🔄 Refactored Tests
        run: |
          echo "🔄 Führe Refactored Component Tests aus..."
          make test-refactored

      # Security Tests
      - name: 🛡️ Security Tests
        run: |
          echo "🛡️ Führe Security Tests aus..."
          make test-security

      # Performance Tests (optional)
      - name: ⚡ Performance Tests
        if: github.event.inputs.run_performance_tests == 'true' || github.event_name == 'push'
        run: |
          echo "⚡ Führe Performance Tests aus..."
          make test-performance
        continue-on-error: true

      # Coverage Report generieren
      - name: 📊 Generate Coverage Report
        run: |
          echo "📊 Generiere Coverage Report..."
          make coverage-report

      # Coverage zu Codecov hochladen
      - name: 📤 Upload Coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      # Coverage HTML Report hochladen
      - name: 📤 Upload Coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30

  # Job 4: Dependency Security Check
  dependency-security:
    name: 🔒 Dependency Security
    runs-on: ubuntu-latest

    steps:
      # Repository auschecken
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5

      # Python Setup
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Safety Check für Dependencies
      - name: 🔒 Safety Check
        run: |
          pip install safety
          echo "🔒 Prüfe Dependencies auf bekannte Sicherheitslücken..."
          safety check --json --output safety-report.json || true
          safety check || echo "⚠️ Sicherheitswarnungen gefunden"

      # Upload Safety Report
      - name: 📤 Upload Safety Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.json
          retention-days: 30

  # Job 5: Build Test
  build-test:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    # Läuft unabhängig von anderen Tests

    steps:
      # Repository auschecken
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5

      # Python Setup
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # Dependencies installieren
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          echo "📋 Installiere ALLE Dependencies..."
          pip install -e "."
          pip install -e ".[dev]"
          echo "✅ Dependencies installiert"

      # Package Build testen
      - name: 🏗️ Test Package Build
        run: |
          echo "🏗️ Teste Package Build..."
          make build

      # Build-Artefakte validieren
      - name: ✅ Validate Build Artifacts
        run: |
          echo "✅ Validiere Build-Artefakte..."
          make check-build

      # Upload Build Artifacts
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Job 6: CI Summary
  ci-summary:
    name: 📋 CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, test-matrix, comprehensive-tests, dependency-security, build-test]
    if: always()

    steps:
      # CI-Status zusammenfassen
      - name: 📋 CI Summary
        run: |
          echo "📋 CI Pipeline Summary"
          echo "====================="
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Test Matrix: ${{ needs.test-matrix.result }}"
          echo "Comprehensive Tests: ${{ needs.comprehensive-tests.result }}"
          echo "Dependency Security: ${{ needs.dependency-security.result }}"
          echo "Build Test: ${{ needs.build-test.result }}"
          echo ""

          # Prüfe kritische Jobs (Code Quality muss erfolgreich sein)
          if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
            echo "❌ Code Quality fehlgeschlagen - CI Pipeline gestoppt!"
            exit 1
          fi

          # Prüfe andere Jobs (erlaubt skipped, aber nicht failure)
          FAILED_JOBS=""

          if [[ "${{ needs.test-matrix.result }}" == "failure" ]]; then
            FAILED_JOBS="$FAILED_JOBS test-matrix"
          fi

          if [[ "${{ needs.comprehensive-tests.result }}" == "failure" ]]; then
            FAILED_JOBS="$FAILED_JOBS comprehensive-tests"
          fi

          if [[ "${{ needs.build-test.result }}" == "failure" ]]; then
            FAILED_JOBS="$FAILED_JOBS build-test"
          fi

          if [[ -n "$FAILED_JOBS" ]]; then
            echo "❌ Fehlgeschlagene Jobs:$FAILED_JOBS"
            exit 1
          else
            echo "✅ CI Pipeline erfolgreich abgeschlossen!"
            exit 0
          fi
