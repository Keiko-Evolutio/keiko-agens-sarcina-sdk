# .github/workflows/ci-parallel-optimized.yml
name: 🚀 CI/CD Pipeline - Parallel Optimized

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      parallelization_strategy:
        description: 'Parallelization strategy'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - aggressive
          - conservative
          - custom

env:
  PYTHON_DEFAULT_VERSION: '3.11'

jobs:
  # ============================================================================
  # PARALLELIZATION PLANNING
  # ============================================================================
  plan-execution:
    name: 🎯 Plan Parallel Execution
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      execution-plan: ${{ steps.parallel.outputs.execution-plan }}
      parallel-groups: ${{ steps.parallel.outputs.parallel-groups }}
      estimated-duration: ${{ steps.parallel.outputs.estimated-duration }}
      parallelization-score: ${{ steps.parallel.outputs.parallelization-score }}
      changes-detected: ${{ steps.changes.outputs.core-changed }}
      fast-mode: ${{ steps.changes.outputs.fast-mode }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Changes
        id: changes
        uses: ./.github/actions/detect-changes
        with:
          impact-analysis: 'true'

      - name: 🎯 Plan Parallel Execution
        id: parallel
        uses: ./.github/actions/parallel-execution
        with:
          execution-strategy: ${{ inputs.parallelization_strategy || 'auto' }}
          max-parallel-jobs: 'auto'
          dependency-graph: |
            {
              "code-quality": [],
              "unit-tests": ["code-quality"],
              "security-scan": ["code-quality"],
              "integration-tests": ["unit-tests"],
              "docs-build": [],
              "performance-tests": ["unit-tests"]
            }
          priority-jobs: 'code-quality,unit-tests'
          background-jobs: 'docs-build,performance-tests'
          conditional-execution: 'true'

  # ============================================================================
  # PARALLEL GROUP 1: CRITICAL PATH (HIGH PRIORITY)
  # ============================================================================
  critical-path:
    name: 🔥 Critical Path
    runs-on: ubuntu-latest
    needs: plan-execution
    timeout-minutes: 20
    strategy:
      fail-fast: false
      max-parallel: 4
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python Environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          install-dev-dependencies: 'true'

      - name: 🚀 Execute Critical Path Tasks
        uses: ./.github/actions/background-tasks
        with:
          tasks: |
            [
              {
                "id": "code-quality",
                "command": "ruff check kei_agent/ --output-format=github",
                "priority": "high",
                "timeout": 300
              },
              {
                "id": "format-check",
                "command": "ruff format --check kei_agent/",
                "priority": "high",
                "timeout": 180
              },
              {
                "id": "type-check",
                "command": "mypy kei_agent/ --show-error-codes",
                "priority": "medium",
                "timeout": 600
              },
              {
                "id": "unit-tests-fast",
                "command": "pytest tests/ -m 'not slow' --maxfail=5 -x",
                "priority": "high",
                "timeout": 900
              }
            ]
          max-concurrent: '4'
          failure-strategy: 'fail-fast'
          resource-monitoring: 'true'

  # ============================================================================
  # PARALLEL GROUP 2: STANDARD PARALLEL (MEDIUM PRIORITY)
  # ============================================================================
  standard-parallel:
    name: 🔄 Standard Parallel
    runs-on: ${{ matrix.os }}
    needs: [plan-execution, critical-path]
    if: needs.plan-execution.outputs.changes-detected == 'true'
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
        exclude:
          - os: windows-latest
            python-version: '3.10'  # Reduziere Windows-Matrix
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python Environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ matrix.python-version }}
          install-dev-dependencies: 'true'
          install-test-dependencies: 'true'

      - name: 🧪 Run Comprehensive Tests
        uses: ./.github/actions/run-tests
        with:
          test-markers: ${{ needs.plan-execution.outputs.fast-mode == 'true' && 'not slow' || '' }}
          coverage-enabled: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' }}
          parallel-tests: 'true'
          max-workers: 'auto'
          upload-artifacts: 'true'

      - name: 🛡️ Security Scan (Ubuntu only)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: ./.github/actions/security-scan
        with:
          bandit-enabled: 'true'
          safety-enabled: 'true'
          pip-audit-enabled: 'true'
          fail-on-error: 'false'

  # ============================================================================
  # PARALLEL GROUP 3: BACKGROUND TASKS (LOW PRIORITY)
  # ============================================================================
  background-tasks:
    name: 🔄 Background Tasks
    runs-on: ubuntu-latest
    needs: plan-execution
    timeout-minutes: 45
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python Environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          install-dev-dependencies: 'false'
          extra-dependencies: 'mkdocs mkdocs-material pytest-benchmark'

      - name: 🔄 Execute Background Tasks
        uses: ./.github/actions/background-tasks
        with:
          tasks: |
            [
              {
                "id": "docs-build",
                "command": "mkdocs build --strict",
                "priority": "low",
                "timeout": 600
              },
              {
                "id": "performance-tests",
                "command": "pytest tests/performance/ --benchmark-only --benchmark-json=benchmark.json",
                "priority": "low",
                "timeout": 1200
              },
              {
                "id": "dependency-check",
                "command": "pip-audit --format=json --output=dependency-audit.json",
                "priority": "low",
                "timeout": 300
              },
              {
                "id": "code-metrics",
                "command": "radon cc kei_agent/ --json > code-complexity.json",
                "priority": "low",
                "timeout": 180
              }
            ]
          max-concurrent: '3'
          failure-strategy: 'continue'
          resource-monitoring: 'true'

      - name: 📤 Upload Background Results
        if: always()
        uses: ./.github/actions/upload-artifacts
        with:
          artifact-name: 'background-task-results'
          artifact-path: |
            site/
            benchmark.json
            dependency-audit.json
            code-complexity.json
          retention-days: 'auto'

  # ============================================================================
  # PARALLEL INTEGRATION TESTS
  # ============================================================================
  integration-parallel:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [plan-execution, critical-path]
    if: needs.plan-execution.outputs.changes-detected == 'true'
    timeout-minutes: 25
    
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        test-group: [api, database, external]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python Environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          install-dev-dependencies: 'true'
          install-test-dependencies: 'true'

      - name: 🔗 Run Integration Tests
        uses: ./.github/actions/retry-with-backoff
        with:
          command: |
            pytest tests/integration/ \
              -m "${{ matrix.test-group }}" \
              --maxfail=3 \
              --junit-xml=integration-${{ matrix.test-group }}-results.xml \
              -v
          max-attempts: '2'
          initial-delay: '10'
          retry-on-errors: 'connection,timeout,flaky'

      - name: 📊 Upload Integration Results
        if: always()
        uses: ./.github/actions/upload-artifacts
        with:
          artifact-name: 'integration-results-${{ matrix.test-group }}'
          artifact-path: 'integration-${{ matrix.test-group }}-results.xml'
          retention-days: 'auto'

  # ============================================================================
  # PARALLEL SUMMARY & ANALYSIS
  # ============================================================================
  parallel-summary:
    name: 📊 Parallel Execution Summary
    runs-on: ubuntu-latest
    needs: [plan-execution, critical-path, standard-parallel, background-tasks, integration-parallel]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📊 Performance Analysis
        id: performance
        uses: ./.github/actions/performance-monitor
        with:
          monitor-type: 'workflow'
          performance-baseline: '.github/performance-baseline.json'
          alert-thresholds: '{"duration_increase": 25, "memory_increase": 20}'

      - name: 📋 Generate Parallel Execution Report
        shell: bash
        run: |
          echo "📋 Generating parallel execution report..."
          
          # Sammle Job-Status
          CRITICAL_STATUS="${{ needs.critical-path.result }}"
          STANDARD_STATUS="${{ needs.standard-parallel.result }}"
          BACKGROUND_STATUS="${{ needs.background-tasks.result }}"
          INTEGRATION_STATUS="${{ needs.integration-parallel.result }}"
          
          # Sammle Parallelization-Metriken
          EXECUTION_PLAN='${{ needs.plan-execution.outputs.execution-plan }}'
          ESTIMATED_DURATION="${{ needs.plan-execution.outputs.estimated-duration }}"
          PARALLELIZATION_SCORE="${{ needs.plan-execution.outputs.parallelization-score }}"
          
          # Erstelle Report
          cat > parallel-execution-report.md << EOF
          # 🚀 Parallel Execution Report
          
          **Workflow:** ${{ github.workflow }}  
          **Strategy:** ${{ inputs.parallelization_strategy || 'auto' }}  
          **Run ID:** ${{ github.run_id }}  
          **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## 🎯 Execution Plan
          
          - **Estimated Duration:** $ESTIMATED_DURATION minutes
          - **Parallelization Score:** $PARALLELIZATION_SCORE/100
          - **Strategy:** ${{ inputs.parallelization_strategy || 'auto' }}
          
          ## 📊 Job Results
          
          | Job Group | Status | Parallel Level |
          |-----------|--------|----------------|
          | Critical Path | $CRITICAL_STATUS | High (4 concurrent) |
          | Standard Parallel | $STANDARD_STATUS | Medium (6 concurrent) |
          | Background Tasks | $BACKGROUND_STATUS | Low (3 concurrent) |
          | Integration Tests | $INTEGRATION_STATUS | Medium (3 concurrent) |
          
          ## 📈 Performance Metrics
          
          - **Performance Score:** ${{ steps.performance.outputs.performance-score }}/100
          - **Baseline Comparison:** ${{ steps.performance.outputs.baseline-comparison }}
          - **Alerts Triggered:** ${{ steps.performance.outputs.alerts-triggered }}
          
          ## 🎯 Parallel Groups
          
          $(echo '${{ needs.plan-execution.outputs.parallel-groups }}' | jq -r '.[] | "- **\(.name)**: \(.jobs | length) jobs, max \(.max_parallel) parallel"')
          
          ## 💡 Optimization Recommendations
          
          $(echo '${{ steps.performance.outputs.recommendations }}' | jq -r '.[] | "- " + .' 2>/dev/null || echo "- No specific recommendations")
          
          EOF
          
          echo "📋 Parallel execution report generated:"
          cat parallel-execution-report.md

      - name: 📤 Upload Parallel Report
        uses: ./.github/actions/upload-artifacts
        with:
          artifact-name: 'parallel-execution-report'
          artifact-path: 'parallel-execution-report.md'
          retention-days: 'auto'

      - name: 📢 Notify on Performance Issues
        if: steps.performance.outputs.alerts-triggered > '1' || needs.plan-execution.outputs.parallelization-score < '70'
        uses: ./.github/actions/notify-failure
        with:
          workflow_name: ${{ github.workflow }}
          job_name: ${{ github.job }}
          failure_reason: "Parallelization performance issues detected: Score ${{ needs.plan-execution.outputs.parallelization-score }}/100, Alerts: ${{ steps.performance.outputs.alerts-triggered }}"
          severity: "medium"
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: ✅ Parallel Execution Completed
        shell: bash
        run: |
          echo "✅ Parallel execution completed!"
          echo "📊 Summary:"
          echo "  - Parallelization Score: ${{ needs.plan-execution.outputs.parallelization-score }}/100"
          echo "  - Estimated Duration: ${{ needs.plan-execution.outputs.estimated-duration }} minutes"
          echo "  - Performance Score: ${{ steps.performance.outputs.performance-score }}/100"
          echo "  - Strategy: ${{ inputs.parallelization_strategy || 'auto' }}"
