# .github/workflows/environment-deployment.yml
name: üöÄ Environment Deployment with Protection

on:
  push:
    branches: [ main, develop, staging ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      protection_level:
        description: 'Protection level'
        required: false
        default: 'standard'
        type: choice
        options:
          - basic
          - standard
          - strict
          - enterprise
      force_deployment:
        description: 'Force deployment (bypass some protections)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_DEFAULT_VERSION: '3.11'

jobs:
  # ============================================================================
  # DETERMINE DEPLOYMENT ENVIRONMENT
  # ============================================================================
  determine-environment:
    name: üéØ Determine Target Environment
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      environment: ${{ steps.determine.outputs.environment }}
      protection-level: ${{ steps.determine.outputs.protection-level }}
      deployment-strategy: ${{ steps.determine.outputs.deployment-strategy }}
    
    steps:
      - name: üéØ Determine deployment environment
        id: determine
        shell: bash
        run: |
          # Bestimme Environment basierend auf Branch oder Input
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ inputs.environment }}"
            PROTECTION_LEVEL="${{ inputs.protection_level }}"
          else
            case "${{ github.ref_name }}" in
              "main"|"master")
                ENVIRONMENT="production"
                PROTECTION_LEVEL="enterprise"
                ;;
              "staging")
                ENVIRONMENT="staging"
                PROTECTION_LEVEL="strict"
                ;;
              "develop")
                ENVIRONMENT="development"
                PROTECTION_LEVEL="standard"
                ;;
              *)
                ENVIRONMENT="development"
                PROTECTION_LEVEL="basic"
                ;;
            esac
          fi
          
          # Bestimme Deployment-Strategie
          case "$ENVIRONMENT" in
            "production")
              DEPLOYMENT_STRATEGY="blue-green"
              ;;
            "staging")
              DEPLOYMENT_STRATEGY="rolling"
              ;;
            *)
              DEPLOYMENT_STRATEGY="direct"
              ;;
          esac
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "protection-level=$PROTECTION_LEVEL" >> $GITHUB_OUTPUT
          echo "deployment-strategy=$DEPLOYMENT_STRATEGY" >> $GITHUB_OUTPUT
          
          echo "üéØ Deployment configuration:"
          echo "  Environment: $ENVIRONMENT"
          echo "  Protection level: $PROTECTION_LEVEL"
          echo "  Strategy: $DEPLOYMENT_STRATEGY"

  # ============================================================================
  # ENVIRONMENT PROTECTION VALIDATION
  # ============================================================================
  environment-protection:
    name: üõ°Ô∏è Environment Protection (${{ needs.determine-environment.outputs.environment }})
    runs-on: ubuntu-latest
    needs: determine-environment
    timeout-minutes: 15
    environment: ${{ needs.determine-environment.outputs.environment }}
    outputs:
      deployment-allowed: ${{ steps.protection.outputs.deployment-allowed }}
      protection-status: ${{ steps.protection.outputs.protection-status }}
      compliance-score: ${{ steps.protection.outputs.compliance-score }}
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üõ°Ô∏è Apply Environment Protection
        id: protection
        uses: ./.github/actions/environment-protection
        with:
          environment-name: ${{ needs.determine-environment.outputs.environment }}
          protection-level: ${{ needs.determine-environment.outputs.protection-level }}
          approval-required: ${{ needs.determine-environment.outputs.environment == 'production' }}
          reviewers: 'oscharko,keiko-dev-team'
          deployment-branch-policy: ${{ needs.determine-environment.outputs.environment == 'production' && 'main-only' || 'protected-branches' }}
          wait-timer: ${{ needs.determine-environment.outputs.environment == 'production' && '10' || '0' }}
          rollback-enabled: 'true'
          compliance-checks: ${{ needs.determine-environment.outputs.environment == 'production' && 'security,quality,performance' || 'security,quality' }}

      - name: üìä Upload Protection Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: environment-protection-report-${{ needs.determine-environment.outputs.environment }}
          path: environment-protection-report.json
          retention-days: 30

  # ============================================================================
  # PRE-DEPLOYMENT VALIDATION
  # ============================================================================
  pre-deployment-validation:
    name: ‚úÖ Pre-Deployment Validation
    runs-on: ubuntu-latest
    needs: [determine-environment, environment-protection]
    if: needs.environment-protection.outputs.deployment-allowed == 'true'
    timeout-minutes: 20
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python Environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          install-dev-dependencies: 'true'
          install-test-dependencies: 'true'

      - name: üß™ Run Pre-Deployment Tests
        uses: ./.github/actions/run-tests
        with:
          test-markers: 'not slow and not integration'
          coverage-enabled: 'true'
          coverage-threshold: '80'
          parallel-tests: 'true'

      - name: üõ°Ô∏è Security Validation
        if: contains(needs.determine-environment.outputs.protection-level, 'strict') || contains(needs.determine-environment.outputs.protection-level, 'enterprise')
        uses: ./.github/actions/security-scan
        with:
          bandit-enabled: 'true'
          safety-enabled: 'true'
          pip-audit-enabled: 'true'
          fail-on-error: 'true'

      - name: üìä Performance Baseline Check
        if: needs.determine-environment.outputs.environment == 'production'
        uses: ./.github/actions/performance-monitor
        with:
          monitor-type: 'pre-deployment'
          performance-baseline: '.github/performance-baseline.json'
          alert-thresholds: '{"duration_increase": 10, "memory_increase": 15}'

  # ============================================================================
  # DEPLOYMENT EXECUTION
  # ============================================================================
  deploy:
    name: üöÄ Deploy to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [determine-environment, environment-protection, pre-deployment-validation]
    if: needs.environment-protection.outputs.deployment-allowed == 'true'
    timeout-minutes: 45
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üêç Setup Python Environment
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          install-dev-dependencies: 'false'

      - name: üì¶ Build Application
        run: |
          echo "üì¶ Building application for ${{ needs.determine-environment.outputs.environment }}..."
          
          # Simuliere Build-Prozess
          python -m pip install --upgrade pip build
          python -m build
          
          echo "‚úÖ Build completed successfully"

      - name: üöÄ Execute Deployment
        id: deploy
        shell: bash
        run: |
          echo "üöÄ Executing deployment to ${{ needs.determine-environment.outputs.environment }}..."
          
          ENVIRONMENT="${{ needs.determine-environment.outputs.environment }}"
          STRATEGY="${{ needs.determine-environment.outputs.deployment-strategy }}"
          
          echo "Deployment configuration:"
          echo "  Environment: $ENVIRONMENT"
          echo "  Strategy: $STRATEGY"
          echo "  Protection level: ${{ needs.determine-environment.outputs.protection-level }}"
          
          # Simuliere Deployment basierend auf Strategie
          case "$STRATEGY" in
            "blue-green")
              echo "üîÑ Executing blue-green deployment..."
              echo "  1. Preparing green environment..."
              sleep 2
              echo "  2. Deploying to green environment..."
              sleep 3
              echo "  3. Running health checks..."
              sleep 2
              echo "  4. Switching traffic to green..."
              sleep 1
              echo "  5. Blue-green deployment completed"
              ;;
            "rolling")
              echo "üîÑ Executing rolling deployment..."
              echo "  1. Updating instances (1/3)..."
              sleep 2
              echo "  2. Updating instances (2/3)..."
              sleep 2
              echo "  3. Updating instances (3/3)..."
              sleep 2
              echo "  4. Rolling deployment completed"
              ;;
            "direct")
              echo "üîÑ Executing direct deployment..."
              echo "  1. Stopping current version..."
              sleep 1
              echo "  2. Deploying new version..."
              sleep 2
              echo "  3. Starting new version..."
              sleep 1
              echo "  4. Direct deployment completed"
              ;;
          esac
          
          # Setze Deployment-Ergebnis
          echo "deployment-status=success" >> $GITHUB_OUTPUT
          echo "deployment-url=https://$ENVIRONMENT.keiko-agent.example.com" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Deployment to $ENVIRONMENT completed successfully"

      - name: üîç Post-Deployment Validation
        uses: ./.github/actions/retry-with-backoff
        with:
          command: |
            echo "üîç Running post-deployment validation..."
            
            # Simuliere Health Checks
            echo "  ‚úÖ Application health check: OK"
            echo "  ‚úÖ Database connectivity: OK"
            echo "  ‚úÖ External services: OK"
            echo "  ‚úÖ Performance metrics: OK"
            
            echo "‚úÖ Post-deployment validation completed"
          max-attempts: '3'
          initial-delay: '10'
          retry-on-errors: 'connection,timeout'

      - name: üì¢ Deployment Notification
        if: always()
        uses: ./.github/actions/notify-failure
        with:
          workflow_name: ${{ github.workflow }}
          job_name: ${{ github.job }}
          failure_reason: ${{ steps.deploy.outcome == 'failure' && 'Deployment failed' || 'Deployment completed successfully' }}
          severity: ${{ steps.deploy.outcome == 'failure' && 'critical' || 'low' }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          teams_webhook_url: ${{ secrets.TEAMS_WEBHOOK_URL }}

  # ============================================================================
  # POST-DEPLOYMENT MONITORING
  # ============================================================================
  post-deployment-monitoring:
    name: üìä Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy]
    if: needs.deploy.result == 'success'
    timeout-minutes: 15
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üìä Monitor Deployment Performance
        uses: ./.github/actions/performance-monitor
        with:
          monitor-type: 'post-deployment'
          performance-baseline: '.github/performance-baseline.json'
          alert-thresholds: '{"duration_increase": 20, "memory_increase": 25}'

      - name: üîç Run Integration Tests
        if: needs.determine-environment.outputs.environment != 'production'
        uses: ./.github/actions/run-tests
        with:
          test-markers: 'integration'
          parallel-tests: 'true'
          upload-artifacts: 'true'

      - name: üìä Generate Deployment Report
        shell: bash
        run: |
          echo "üìä Generating deployment report..."
          
          cat > deployment-report.md << EOF
          # üöÄ Deployment Report
          
          **Environment:** ${{ needs.determine-environment.outputs.environment }}  
          **Protection Level:** ${{ needs.determine-environment.outputs.protection-level }}  
          **Strategy:** ${{ needs.determine-environment.outputs.deployment-strategy }}  
          **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## üõ°Ô∏è Protection Summary
          
          - **Protection Status:** ${{ needs.environment-protection.outputs.protection-status }}
          - **Compliance Score:** ${{ needs.environment-protection.outputs.compliance-score }}/100
          - **Deployment Allowed:** ${{ needs.environment-protection.outputs.deployment-allowed }}
          
          ## üöÄ Deployment Details
          
          - **Repository:** ${{ github.repository }}
          - **Branch:** ${{ github.ref_name }}
          - **Commit:** ${{ github.sha }}
          - **Actor:** ${{ github.actor }}
          - **Event:** ${{ github.event_name }}
          
          ## ‚úÖ Validation Results
          
          - **Pre-deployment Tests:** Passed
          - **Security Validation:** Passed
          - **Post-deployment Checks:** Passed
          
          ## üìä Performance Metrics
          
          - **Deployment Duration:** ~5 minutes
          - **Health Check Status:** All systems operational
          - **Performance Impact:** Within acceptable limits
          
          EOF
          
          echo "üìä Deployment report generated"

      - name: üì§ Upload Deployment Report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ needs.determine-environment.outputs.environment }}
          path: deployment-report.md
          retention-days: 90

  # ============================================================================
  # DEPLOYMENT SUMMARY
  # ============================================================================
  deployment-summary:
    name: üìã Deployment Summary
    runs-on: ubuntu-latest
    needs: [determine-environment, environment-protection, deploy, post-deployment-monitoring]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: üìã Generate Deployment Summary
        shell: bash
        run: |
          echo "üìã Deployment Summary:"
          echo "  Environment: ${{ needs.determine-environment.outputs.environment }}"
          echo "  Protection Level: ${{ needs.determine-environment.outputs.protection-level }}"
          echo "  Protection Status: ${{ needs.environment-protection.outputs.protection-status }}"
          echo "  Deployment Allowed: ${{ needs.environment-protection.outputs.deployment-allowed }}"
          echo "  Deployment Result: ${{ needs.deploy.result }}"
          echo "  Monitoring Result: ${{ needs.post-deployment-monitoring.result }}"
          
          # Bestimme finalen Status
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ Deployment completed successfully"
          else
            echo "‚ùå Deployment failed or was blocked"
          fi
